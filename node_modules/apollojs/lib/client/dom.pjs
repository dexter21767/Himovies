#ifdef APOLLO_IE8
#include "ie8.pjs"
#endif

function $I(id) {
  return document.getElementById(id);
}

function $TA(tag, ele) {
  return (ele || document).getElementsByTagName(tag);
}

function $T(tag, ele) {
  var els = $TA(tag, ele);
  return els.length > 0 ? els[0] : null;
}

function $SA(sel, ele) {
  return (ele || document).querySelectorAll(sel);
}

function $S(sel, ele) {
  return (ele || document).querySelector(sel);
}

function $CA(name, ele) {
  return (ele || document).getElementsByClassName(name);
}

function $C(name, ele) {
  var els = $CA(name, ele);
  return els.length > 0 ? els[0] : null;
}

var pElementCache = {};

function $E(name, att) {
  if (!pElementCache[name])
    pElementCache[name] = document.createElement(name);
  var el = pElementCache[name].cloneNode(false);
  for (var i = 1; i < arguments.length; i++)
    if (arguments[i] instanceof HTMLElement)
      el.appendChild(arguments[i]);
    else if (typeof arguments[i] === 'string')
      el.appendChild(document.createTextNode(arguments[i]));
    else for (var key in arguments[i])
      if (key !== 'class') el.setAttribute(key, arguments[i][key]);
      else el.className = arguments[i][key];
  return el;
}

$define(Node.prototype, {
  $ancestorOf: function(node, noself) {
    for (node = noself ? node.parentNode : node;
        node;
        node = node.parentNode)
      if (this === node) return true;
    return false;
  },
  $findAncestorOfTagName: function(tagname, noself, blocker) {
    blocker = blocker || document;
    for (var node = noself ? this.parentNode : this;
        node;
        node = node.parentNode) {
      if (node.tagName === tagname)
        return node;
      if (node == blocker)
        return null;
    }
    return null;
  },
  $findAncestorWithAttribute: function(attr, noself, blocker) {
    blocker = blocker || document;
    for (var node = noself ? this.parentNode : this;
        node && node != document;
        node = node.parentNode) {
      if (node.hasAttribute(attr))
        return node;
      if (node == blocker)
        return null;
    }
    return null;
  },
  $findTypedAncestor: function(noself, blocker) {
    return this.$findAncestorWithAttribute('data-type', noself, blocker);
  },
  $extract: function() {
    return this.parentNode.removeChild(this);
  },
  $replaceWith: function(node) {
    return this.parentNode.replaceChild(node, this);
  },
  $clearContent: function() {
    while (this.firstChild)
      this.removeChild(this.firstChild);
    return this;
  },
  $setFirstTextNodeValue: function(value) {
    for (var node = this.firstChild; node; node = node.nextSibling)
      if (node.nodeType === 3) {
        node.nodeValue = value;
        return this;
      }
    this.appendChild(document.createTextNode(value));
    return this;
  }
});

function hideClassAfterDuration(el, cls, duration) {
  var timers = el.$getData('apolloTimers', true) || {};
  if (timers[cls])
    clearTimeout(timers[cls]);
  timers[cls] = setTimeout(function() {
    el.$removeClass(cls);
  }, duration);
  el.$setData('apolloTimers', timers, true);
}

// for shitting IE9.
$define(Element.prototype, document.documentElement.classList ? {
  $addClass: function(cls, duration) {
    this.classList.add(cls);
    if (duration)
      hideClassAfterDuration(this, cls, duration);
    return this;
  },
  $removeClass: function(cls) {
    this.classList.remove(cls);
    return this;
  },
  $hasClass: function(cls) {
    return this.classList.contains(cls);
  },
  $toggleClass: function(cls) {
    this.classList.toggle(cls);
    return this;
  }
} : {
  $addClass: function(cls, duration) {
    if (!this.$hasClass(cls))
      this.className += ' ' + cls;
    if (duration)
      hideClassAfterDuration(this, cls, duration);
    return this;
  },
  $removeClass: function(cls) {
    this.className = this.className.replace(new RegExp('\\s*\\b' + cls + '\\b', 'g'), '');
    return this;
  },
  $hasClass: function(cls) {
    return (new RegExp('\\b' + cls + '\\b')).test(this.className);
  },
  $toggleClass: function(cls) {
    if (this.$hasClass(cls))
      this.$removeClass(cls);
    else
      this.$addClass(cls);
    return this;
  }
});

$define(Element.prototype, {
  $setClass: function(cls, set, duration) {
    return set ?
      this.$addClass(cls, duration) :
      this.$removeClass(cls);
  },
  $hide: function() {
    return this.$addClass('HIDE');
  },
  $show: function() {
    return this.$removeClass('HIDE');
  },
  $getVisibility: function() {
    return !this.$hasClass('HIDE');
  },
  $setVisibility: function(visible) {
    return this.$setClass('HIDE', !visible);
  },
  $getSize: function() {
    return {
      w: this.offsetWidth,
      h: this.offsetHeight
    };
  },
  $getOffsetPos: function(blocker) {
    var x = 0, y = 0;
    for (var node = this; node.offsetParent && node !== blocker;
        node = node.offsetParent) {
      x += node.offsetLeft;
      y += node.offsetTop;
    }
    return {
      x: x,
      y: y
    };
  },
  $getOffsetLeft: function(blocker) {
    var x = 0;
    for (var node = this; node.offsetParent && node !== blocker;
        node = node.offsetParent)
      x += node.offsetLeft;
    return x;
  },
  $getOffsetTop: function(blocker) {
    var y = 0;
    for (var node = this; node.offsetParent && node !== blocker;
        node = node.offsetParent)
      y += node.offsetTop;
    return y;
  },
  $getScreenPos: function() {
    var pos = this.getPos();
    pos.x -= $DE.scrollLeft;
    pos.y -= $DE.scrollTop;
    return pos;
  },
  $setPos: function(pos) {
    if ('x' in pos) this.style.left = pos.x + 'px';
    if ('y' in pos) this.style.top = pos.y + 'px';
    return this;
  },
  $setSize: function(size) {
    if ('w' in size) this.style.width = size.w + 'px';
    if ('h' in size) this.style.height = size.h + 'px';
    return this;
  },
  $measure: function() {
    if (!this.parentNode)
      document.body.appendChild(this);
    return this.$addClass('MEASURING').$getSize();
  },
  $unmeasure: function() {
    var node = this;
    setTimeout(function() {
      node.$removeClass('MEASURING');
    }, 0);
    return this;
  },
  $setAttr: function(name, value, json) {
    if (json)
      value = JSON.stringify(value);
    this.setAttribute(name, value);
    return this;
  },
  $getAttr: function(name, json) {
    var value = this.getAttribute(name);
    if (json)
      return JSON.parse(value);
    return value;
  },
  $removeAttr: function(name) {
    this.removeAttribute(name);
    return this;
  },
  $setTextValue: function(value) {
    if (this.firstChild && this.firstChild.nodeType === 3) {
      this.firstChild.nodeValue = value;
      return this;
    }
    this.appendChild(document.createTextNode(value));
    return this;
  },
  $disableScrollPropagation: function() {
    if (document.body.onmousewheel !== undefined)
      this.addEventListener('mousewheel', disableScrollPropagation, false);
    else
      this.addEventListener('wheel', disableScrollPropagation, false);
    return this;
  },
  $enableScrollPropagation: function() {
    if (document.body.onmousewheel !== undefined)
      this.removeEventListener('mousewheel', disableScrollPropagation, false);
    else
      this.removeEventListener('wheel', disableScrollPropagation, false);
    return this;
  }
});

function disableScrollPropagation(evt) {
  // console.log(evt.wheelDeltaY);
  // debugger;
  // console.log(Object.keys(evt));
  var deltaY = evt.wheelDeltaY || -evt.deltaY || evt.wheelDelta;
  if (deltaY > 0) {
    if (this.scrollTop <= 0)
      evt.preventDefault();
  } else if (this.scrollTop + this.clientHeight >= this.scrollHeight) {
    evt.preventDefault();
  }
}

function toDatasetName(name) {
  return 'data-' + name.replace(/[A-Z]/g, function(cap) {
    return '-' + cap.toLowerCase();
  });
}

$define(Element.prototype, document.documentElement.dataset ? {
  $setData: function(name, value, json) {
    if (json)
      value = JSON.stringify(value);
    this.dataset[name] = value;
    return this;
  },
  $getData: function(name, json) {
    var value = this.dataset[name];
    if (value && json)
      return JSON.parse(value);
    return value;
  },
  $removeData: function(name) {
    delete this.dataset[name];
    return this;
  }
} : {
  $setData: function(name, value, json) {
    if (json)
      value = JSON.stringify(value);
    this.setAttribute(toDatasetName(name), value);
    return this;
  },
  $getData: function(name, json) {
    var value = this.getAttribute(toDatasetName(name)) || undefined;
    if (value && json)
      return JSON.parse(value);
    return value;
  },
  $removeData: function(name) {
    this.removeAttribute(toDatasetName(name));
    return this;
  }
});

#ifdef APOLLO_SVG

$define(SVGElement.prototype, {
  $addClass: function(cls, duration) {
    if (!this.$hasClass(cls)) {
      if (this.getAttribute('class'))
        this.setAttribute('class', this.getAttribute('class') + ' ' + cls);
      else
        this.setAttribute('class', cls);
    }
    if (duration)
      hideClassAfterDuration(this, cls, duration);
    return this;
  },
  $removeClass: function(cls) {
    if (this.$hasClass(cls)) {
      if (this.getAttribute('class') === cls)
        this.removeAttribute('class')
      else
        this.setAttribute('class', this.getAttribute('class').replace(new RegExp('\\s*\\b' + cls + '\\b', 'g'), ''));
    }
    return this;
  },
  $hasClass: function(cls) {
    return (new RegExp('\\b' + cls + '\\b')).test(this.getAttribute('class'));
  },
  $toggleClass: function(cls) {
    if (this.$hasClass(cls))
      this.$removeClass(cls);
    else
      this.$addClass(cls);
    return this;
  },
  $setData: function(name, value, json) {
    if (json)
      value = JSON.stringify(value);
    this.setAttribute(toDatasetName(name), value);
    return this;
  },
  $getData: function(name, json) {
    var value = this.getAttribute(toDatasetName(name)) || undefined;
    if (value && json)
      return JSON.parse(value);
    return value;
  },
  $removeData: function(name) {
    this.removeAttribute(toDatasetName(name));
    return this;
  }
});

#endif // APOLLO_SVG

/**
 * Request a web resource
 * @param {string}   method                  method of the request
 * @param {string}   url                     url of the request
 * @param {Object}   headers                 headers for the request
 * @param {Object}   payload                 payload of the request
 * @param {mixed}    resDataType             wrap the response with
 *                                           the given function's prototype
 *                                           if a function was given;
 *                                           merge the response to
 *                                           return a JSON object if JSON
 *                                           was given;
 *                                           the given object if a object
 *                                           was given;
 *                                           return responseText if null
 *                                           was given.
 * @param {Function} callback(err, res, xhr) callback function
 * @param {Function} progress(evt)           progress callback
 */
function Request(method, url, headers, payload, resDataType, callback, progress) {

  var xhr = new XMLHttpRequest();
  if (xhr.onload === undefined) {
    // we are fucking with IE8!
    xhr.onreadystatechange = function() {
      if (xhr.readyState == 4)
        xhr.onload();
      else if (xhr.readyState === 0)
        xhr.onerror();
    };
  }
  xhr.onload = function() {
    var res;
    if (xhr.status >= 200 && xhr.status <= 207) {
      if (resDataType) {
        try {
          res = JSON.parse(xhr.responseText);
        } catch(e) {
          return callback(e, null, xhr);
        }
        if (resDataType === JSON)
            return callback(null, res, xhr);
        if (Function.isFunction(resDataType))
          return callback(null, $wrap(res, resDataType), xhr);
        return callback(null, $extend(resDataType, res), xhr);
      }
      return callback(null, xhr.responseText, xhr);
    }
    callback(xhr.status, null, xhr);
  };
  xhr.onerror = function(evt) {
    callback(new ERROR('request error %d', xhr.status), null, xhr);
  };
  if (progress) {
    if (typeof XMLHttpRequestProgressEvent !== 'undefined') {
      xhr.onprogress = progress;
    } else {
      console.log(progress);
    }
  }
  method = method.toUpperCase();
  if (method != 'GET' && method != 'POST') {
    xhr.open('POST', url, true);
    xhr.setRequestHeader('x-http-method-override', method);
  } else {
    xhr.open(method, url, true);
  }
  if (resDataType)
    xhr.setRequestHeader('Accept', 'application/json');

  if (headers)
    for (var key in headers)
      xhr.setRequestHeader(key, headers.value);

  if (method == 'POST' || method == 'PUT') {
    if (Object.isObject(payload)) {
      payload = JSON.stringify(payload);
      xhr.setRequestHeader('Content-Type', 'application/json');
    }
    xhr.send(payload);
  } else {
    xhr.send(null);
  }
  // Return Xhr object, so one may call to abort to the request
  return xhr;
}
['get', 'post', 'put', 'delete', 'head'].forEach(function(method) {
  Request[method] = Request.bind(Request, method.toUpperCase());
});

function Tmpl(node, targets, singleton) {
  this.node = node;
  this.begins = [];
  this.targets = [];
  this.fields = [];
  this.mapping = [];
  this.singleton = singleton;
  for (var i = 0; i < targets.length; i++) {
    var tmp = targets[i] instanceof Array ? targets[i] : [targets[i]];
    this.begins.push(this.targets.length);
    for (var j = 0; j < tmp.length; j++) {
      var field = this.parse(node, tmp[j]);
      if (field) {
        this.targets.push(tmp[j]);
        this.fields.push(field);
        this.mapping.push(i);
      }
    }
  }
  this.begins.push(this.targets.length);
  if (!singleton)
    node.$extract();
}
$declare(Tmpl, {
  generate: function() {
    var data = arguments;
    if (Array.isArray(data[0]))
      data = data[0];
    // if (data) for (var i = 0, l = Math.min(this.fields.length, this.begins[Math.min(this.begins.length-1, data.length)]); i < l; i++)
      // this.fields[i].nodeValue = data[this.mapping[i]];
    for (var i = 0; i < this.fields.length; i++)
      this.fields[i].nodeValue = $default(data[this.mapping[i]], '');
    if (!this.singleton)
      return this.node.cloneNode(true);
    return this.node;
  },
  // apply: function(node, data) {
  //   // for (var i = 0, l = Math.min(this.fields.length, this.begins[Math.min(this.begins.length-1, data.length)]); i < l; i++)
  //     // this.parse(node, this.targets[i]).nodeValue = data[this.mapping[i]];
  //   for (var i = 0; i < this.fields.length; i++)
  //     this.parse(node, this.targets[i]).nodeValue = $default(data[this.mapping[i]], '');
  //   return node;
  // },
  // applySingle: function(node, index, datum) {
  //   for (var i = this.begins[index]; i < this.begins[index+1]; i++)
  //     this.parse(node, this.targets[i]).nodeValue = datum;
  //   return node;
  // },
  // getNode: function(node, index) {
  //   return this.parse(node, this.targets[this.begins[index]]);
  // },
  // getElement: function(node, index) {
  //   var selector = this.targets[this.begins[index]].split('@');
  //   return selector[0] === '.' ? node : $S(selector[0], node);
  // },
  parse: function(that, selector) {
    selector = selector.split('@');
    var node = selector[0] === '.' ? that : $S(selector[0], that);
    if (selector[1]) {
      var attr = node.getAttributeNode(selector[1]);
      if (!attr) {
        attr = document.createAttribute(selector[1]);
        node.setAttributeNode(attr);
      }
      node = attr;
    }
    if (node instanceof HTMLElement && node.nodeType !== 2 && node.nodeType !== 3)
      node = node.firstChild && node.firstChild.nodeType === 3 ?
        node.firstChild : node.appendChild(document.createTextNode(''));
    return node;
  }
});

$define(CSSStyleSheet.prototype, {
  clear: function() {
    this.disabled = true;
    var rules = this.cssRules || this.rules;
    while (rules.length > 0)
      this.removeRule(0);
    this.disabled = false;
  },
  setRules: function(rules) {
    this.disabled = true;
    for (var i = 0; i < rules.length; i++)
      this.appendRule(rules[i]);
    this.disabled = false;
  },
  appendRule: function(selector, style) {
    var rules = this.cssRules || this.rules;
    var idx = rules.length;
    if (this.insertRule)
      this.insertRule(selector + '{}', idx);
    else
      this.addRule(selector, ';');
    var rule = rules[idx];
    // console.log(rule);
    if (style)
      for (var name in style)
        rule.style[name] = style[name];
    return rule;
  },
  indexOf: function(rule) {
    var rules = this.cssRules || this.rules;
    for (var i = 0; i < rules.length; i++)
      if (rules[i] === rule)
        return i;
    return -1;
  },
  removeRule: function(idx) {
    this.deleteRule(idx);
  }
}, true);

/**
 * Create a event throttle for time critical events
 *   eg. Resize, MouseMove, KeyDown etc.
 * @param {number}   rate               Sample Rate in Hz
 * @param {number}   minRate            Minimal sample rate in Hz
 * @param {number}   finalDelay         Delaying some time after all events were
 *                                      emitted.
 * @param {Function} slowHandler        will be called in rate or minRate if
 *                                      event continuing emitted
 * @param {Function} fastHandler(event) will be called after each event emitted
 * Note: if minRate < 1, slowHandler won't be called until finalDelay.
 *   And slowHandler won't be called with event object,
 *   please store it yourself in fastHandler. And slowHandler will
 *   always be called after all event fired.
 */
function EventThrottle(rate, minRate, finalDelay, slowHandler, fastHandler) {

  var defaultKeeper = {};
  var handler;

  if (rate < 0) {
    // This is a automatic throttle, which uses requestAnimationFrame
    handler = function(evt) {
      var timerKeeper = this !== window && this || defaultKeeper;
      if (!timerKeeper.pEventThrottleAnimationFrame) {
        timerKeeper.pEventThrottleAnimationFrame = true;
        requestAnimationFrame(slowHandlerWrapperForAnimationFrame.bind(this, timerKeeper));
      }
      if (handler.fastHandler)
        return handler.fastHandler.call(this, evt);
    };
  } else {
    handler = function(evt) {
      var timerKeeper = this !== window && this || defaultKeeper;
      if (rate > 0) {
        clearTimeout(timerKeeper.pEventThrottleDelay);
        timerKeeper.pEventThrottleDelay = setTimeout(slowHandlerWrapper.bind(this, timerKeeper), 1000 / rate);
      }
      if (finalDelay > 0) {
        clearTimeout(timerKeeper.pEventThrottleFinalDelay);
        timerKeeper.pEventThrottleFinalDelay = setTimeout(slowHandlerWrapper.bind(this, timerKeeper), finalDelay);
      }
      if (minRate > 0 && timerKeeper.pEventThrottleMaxDelay === undefined)
        timerKeeper.pEventThrottleMaxDelay = setTimeout(slowHandlerWrapper.bind(this, timerKeeper), 1000 / minRate);
      if (handler.fastHandler)
        return handler.fastHandler.call(this, evt);
    };
  }

  handler.slowHandler = slowHandler;
  handler.fastHandler = fastHandler;

  return handler;

  function slowHandlerWrapper(timerKeeper) {
    clearTimeout(timerKeeper.pEventThrottleMaxDelay);
    delete timerKeeper.pEventThrottleMaxDelay;
    handler.slowHandler.call(this);
  }

  function slowHandlerWrapperForAnimationFrame(timerKeeper) {
    delete timerKeeper.pEventThrottleAnimationFrame;
    handler.slowHandler.call(this);
  }

}

/**
 * Create a callback buffer, that will buffer the callback until
 *   a certain amount of time.
 * @param {Function} callback      original callback function
 * @param {int}      time          minimal time needed before callback
 * @param {bool}     noErrShortcut no shortcut to callback if err occurs
 * @return {Function}              a wrapped callback function
 */
function CallbackBuffer(callback, time, noErrShortcut) {
  if (!time)
    return callback;
  var startTime = Date.now();
  return function(err) {
    if (err && !noErrShortcut)
      return callback.apply(this, arguments);
    var waitTime = startTime + time - Date.now();
    if (waitTime <= 0)
      return callback.apply(this, arguments);
    var self = this, args = arguments;
    setTimeout(function() {
      callback.apply(self, args);
    }, waitTime);
  };
}

/**
 * Create a wrapper for a callback function which takes no parameters,
 *   and this wrapper will make sure the function will be called only
 *   once. All the following caller will be cached in a queue and get
 *   called after the original callback being called. If the original
 *   callback is already called, the callers will be called immediately.
 * @param {Function} fn       function
 * @param {bool}     reusable true if it's reusable.
 */
function CallOnce(fn, reusable) {
  var loaded = false, loading = false;
  var queue = [];
  var args;
  return function(callback) {
    if (loaded)
      return callback.apply(null, args);
    if (callback)
      queue.push(callback);
    if (loading)
      return;
    loading = true;
    fn.call(this, function() {
      args = arguments;
      loading = false;
      loaded = !reusable;
      for (var i = 0; i < queue.length; i++)
        queue[i].apply(null, args);
      queue.length = 0;
    });
  };
}

/**
 * Create a wrapper for a callback function, which will guarantee no error
 *   argument will be passed to it.
 * @param {Function} fn function being wrapped
 */
function StripError(fn) {
  return function(err) {
    err = null;
    fn.apply(this, arguments);
  };
}

$define(window, {
  $I: $I,
  $TA: $TA,
  $T: $T,
  $SA: $SA,
  $S: $S,
  $CA: $CA,
  $C: $C,
  $E: $E,
  Request: Request,
  Tmpl: Tmpl,
  EventThrottle: EventThrottle,
  CallbackBuffer: CallbackBuffer,
  CallOnce: CallOnce,
  StripError: StripError
});

if (!window.requestAnimationFrame)
  $define(window, {
    requestAnimationFrame: window.mozRequestAnimationFrame ||
      window.webkitRequestAnimationFrame ||
      window.msRequestAnimationFrame || function(callback) {
        return setTimeout(callback, 25);
      },
    cancelAnimationFrame: window.mozCancelAnimationFrame ||
      window.webkitCancelAnimationFrame ||
      window.msCancelAnimationFrame || clearTimeout
    });
